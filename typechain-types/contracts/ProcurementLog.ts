/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ProcurementLog {
  export type BidDataStruct = {
    bidId: string;
    rfpId: string;
    vendorId: string;
    submissionDate: BigNumberish;
    proposalHash: BytesLike;
  };

  export type BidDataStructOutput = [
    bidId: string,
    rfpId: string,
    vendorId: string,
    submissionDate: bigint,
    proposalHash: string
  ] & {
    bidId: string;
    rfpId: string;
    vendorId: string;
    submissionDate: bigint;
    proposalHash: string;
  };

  export type ContractDataStruct = {
    contractId: string;
    rfpId: string;
    vendorId: string;
    bidId: string;
    awardDate: BigNumberish;
    totalValue: BigNumberish;
    startDate: BigNumberish;
    endDate: BigNumberish;
  };

  export type ContractDataStructOutput = [
    contractId: string,
    rfpId: string,
    vendorId: string,
    bidId: string,
    awardDate: bigint,
    totalValue: bigint,
    startDate: bigint,
    endDate: bigint
  ] & {
    contractId: string;
    rfpId: string;
    vendorId: string;
    bidId: string;
    awardDate: bigint;
    totalValue: bigint;
    startDate: bigint;
    endDate: bigint;
  };

  export type MilestoneDataStruct = {
    milestoneId: string;
    contractId: string;
    title: string;
    dueDate: BigNumberish;
    status: string;
    updatedBy: string;
    detailsHash: BytesLike;
  };

  export type MilestoneDataStructOutput = [
    milestoneId: string,
    contractId: string,
    title: string,
    dueDate: bigint,
    status: string,
    updatedBy: string,
    detailsHash: string
  ] & {
    milestoneId: string;
    contractId: string;
    title: string;
    dueDate: bigint;
    status: string;
    updatedBy: string;
    detailsHash: string;
  };

  export type RfpDataStruct = {
    rfpId: string;
    title: string;
    budget: BigNumberish;
    submissionDeadline: BigNumberish;
    createdBy: string;
  };

  export type RfpDataStructOutput = [
    rfpId: string,
    title: string,
    budget: bigint,
    submissionDeadline: bigint,
    createdBy: string
  ] & {
    rfpId: string;
    title: string;
    budget: bigint;
    submissionDeadline: bigint;
    createdBy: string;
  };
}

export interface ProcurementLogInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "logBidEvaluation"
      | "logBidSubmission"
      | "logContractAward"
      | "logMilestoneCreation"
      | "logMilestoneUpdate"
      | "logRfpCreation"
      | "logRfpPublication"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BidEvaluated"
      | "BidSubmitted"
      | "ContractAwarded"
      | "MilestoneCreated"
      | "MilestoneUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "RfpCreated"
      | "RfpPublished"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "logBidEvaluation",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "logBidSubmission",
    values: [string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "logContractAward",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "logMilestoneCreation",
    values: [string, string, string, BigNumberish, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "logMilestoneUpdate",
    values: [string, string, string, BigNumberish, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "logRfpCreation",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "logRfpPublication",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "logBidEvaluation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logBidSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logContractAward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logMilestoneCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logMilestoneUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logRfpCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logRfpPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace BidEvaluatedEvent {
  export type InputTuple = [
    bidId: string,
    rfpId: string,
    evaluationScore: BigNumberish,
    evaluationDate: BigNumberish,
    evaluationHash: BytesLike
  ];
  export type OutputTuple = [
    bidId: string,
    rfpId: string,
    evaluationScore: bigint,
    evaluationDate: bigint,
    evaluationHash: string
  ];
  export interface OutputObject {
    bidId: string;
    rfpId: string;
    evaluationScore: bigint;
    evaluationDate: bigint;
    evaluationHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidSubmittedEvent {
  export type InputTuple = [data: ProcurementLog.BidDataStruct];
  export type OutputTuple = [data: ProcurementLog.BidDataStructOutput];
  export interface OutputObject {
    data: ProcurementLog.BidDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractAwardedEvent {
  export type InputTuple = [data: ProcurementLog.ContractDataStruct];
  export type OutputTuple = [data: ProcurementLog.ContractDataStructOutput];
  export interface OutputObject {
    data: ProcurementLog.ContractDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneCreatedEvent {
  export type InputTuple = [data: ProcurementLog.MilestoneDataStruct];
  export type OutputTuple = [data: ProcurementLog.MilestoneDataStructOutput];
  export interface OutputObject {
    data: ProcurementLog.MilestoneDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneUpdatedEvent {
  export type InputTuple = [data: ProcurementLog.MilestoneDataStruct];
  export type OutputTuple = [data: ProcurementLog.MilestoneDataStructOutput];
  export interface OutputObject {
    data: ProcurementLog.MilestoneDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RfpCreatedEvent {
  export type InputTuple = [data: ProcurementLog.RfpDataStruct];
  export type OutputTuple = [data: ProcurementLog.RfpDataStructOutput];
  export interface OutputObject {
    data: ProcurementLog.RfpDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RfpPublishedEvent {
  export type InputTuple = [
    rfpId: string,
    publishDate: BigNumberish,
    numberOfBidsAllowed: BigNumberish
  ];
  export type OutputTuple = [
    rfpId: string,
    publishDate: bigint,
    numberOfBidsAllowed: bigint
  ];
  export interface OutputObject {
    rfpId: string;
    publishDate: bigint;
    numberOfBidsAllowed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProcurementLog extends BaseContract {
  connect(runner?: ContractRunner | null): ProcurementLog;
  waitForDeployment(): Promise<this>;

  interface: ProcurementLogInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  logBidEvaluation: TypedContractMethod<
    [
      bidId: string,
      rfpId: string,
      evaluationScore: BigNumberish,
      evaluationHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  logBidSubmission: TypedContractMethod<
    [bidId: string, rfpId: string, vendorId: string, proposalHash: BytesLike],
    [void],
    "nonpayable"
  >;

  logContractAward: TypedContractMethod<
    [
      contractId: string,
      rfpId: string,
      vendorId: string,
      bidId: string,
      totalValue: BigNumberish,
      startDate: BigNumberish,
      endDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  logMilestoneCreation: TypedContractMethod<
    [
      milestoneId: string,
      contractId: string,
      title: string,
      dueDate: BigNumberish,
      status: string,
      updatedBy: string,
      detailsHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  logMilestoneUpdate: TypedContractMethod<
    [
      milestoneId: string,
      contractId: string,
      title: string,
      dueDate: BigNumberish,
      status: string,
      updatedBy: string,
      detailsHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  logRfpCreation: TypedContractMethod<
    [
      rfpId: string,
      title: string,
      budget: BigNumberish,
      submissionDeadline: BigNumberish,
      createdBy: string
    ],
    [void],
    "nonpayable"
  >;

  logRfpPublication: TypedContractMethod<
    [rfpId: string, numberOfBidsAllowed: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "logBidEvaluation"
  ): TypedContractMethod<
    [
      bidId: string,
      rfpId: string,
      evaluationScore: BigNumberish,
      evaluationHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "logBidSubmission"
  ): TypedContractMethod<
    [bidId: string, rfpId: string, vendorId: string, proposalHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "logContractAward"
  ): TypedContractMethod<
    [
      contractId: string,
      rfpId: string,
      vendorId: string,
      bidId: string,
      totalValue: BigNumberish,
      startDate: BigNumberish,
      endDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "logMilestoneCreation"
  ): TypedContractMethod<
    [
      milestoneId: string,
      contractId: string,
      title: string,
      dueDate: BigNumberish,
      status: string,
      updatedBy: string,
      detailsHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "logMilestoneUpdate"
  ): TypedContractMethod<
    [
      milestoneId: string,
      contractId: string,
      title: string,
      dueDate: BigNumberish,
      status: string,
      updatedBy: string,
      detailsHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "logRfpCreation"
  ): TypedContractMethod<
    [
      rfpId: string,
      title: string,
      budget: BigNumberish,
      submissionDeadline: BigNumberish,
      createdBy: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "logRfpPublication"
  ): TypedContractMethod<
    [rfpId: string, numberOfBidsAllowed: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BidEvaluated"
  ): TypedContractEvent<
    BidEvaluatedEvent.InputTuple,
    BidEvaluatedEvent.OutputTuple,
    BidEvaluatedEvent.OutputObject
  >;
  getEvent(
    key: "BidSubmitted"
  ): TypedContractEvent<
    BidSubmittedEvent.InputTuple,
    BidSubmittedEvent.OutputTuple,
    BidSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ContractAwarded"
  ): TypedContractEvent<
    ContractAwardedEvent.InputTuple,
    ContractAwardedEvent.OutputTuple,
    ContractAwardedEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneCreated"
  ): TypedContractEvent<
    MilestoneCreatedEvent.InputTuple,
    MilestoneCreatedEvent.OutputTuple,
    MilestoneCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneUpdated"
  ): TypedContractEvent<
    MilestoneUpdatedEvent.InputTuple,
    MilestoneUpdatedEvent.OutputTuple,
    MilestoneUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RfpCreated"
  ): TypedContractEvent<
    RfpCreatedEvent.InputTuple,
    RfpCreatedEvent.OutputTuple,
    RfpCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RfpPublished"
  ): TypedContractEvent<
    RfpPublishedEvent.InputTuple,
    RfpPublishedEvent.OutputTuple,
    RfpPublishedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BidEvaluated(string,string,uint256,uint256,bytes32)": TypedContractEvent<
      BidEvaluatedEvent.InputTuple,
      BidEvaluatedEvent.OutputTuple,
      BidEvaluatedEvent.OutputObject
    >;
    BidEvaluated: TypedContractEvent<
      BidEvaluatedEvent.InputTuple,
      BidEvaluatedEvent.OutputTuple,
      BidEvaluatedEvent.OutputObject
    >;

    "BidSubmitted(tuple)": TypedContractEvent<
      BidSubmittedEvent.InputTuple,
      BidSubmittedEvent.OutputTuple,
      BidSubmittedEvent.OutputObject
    >;
    BidSubmitted: TypedContractEvent<
      BidSubmittedEvent.InputTuple,
      BidSubmittedEvent.OutputTuple,
      BidSubmittedEvent.OutputObject
    >;

    "ContractAwarded(tuple)": TypedContractEvent<
      ContractAwardedEvent.InputTuple,
      ContractAwardedEvent.OutputTuple,
      ContractAwardedEvent.OutputObject
    >;
    ContractAwarded: TypedContractEvent<
      ContractAwardedEvent.InputTuple,
      ContractAwardedEvent.OutputTuple,
      ContractAwardedEvent.OutputObject
    >;

    "MilestoneCreated(tuple)": TypedContractEvent<
      MilestoneCreatedEvent.InputTuple,
      MilestoneCreatedEvent.OutputTuple,
      MilestoneCreatedEvent.OutputObject
    >;
    MilestoneCreated: TypedContractEvent<
      MilestoneCreatedEvent.InputTuple,
      MilestoneCreatedEvent.OutputTuple,
      MilestoneCreatedEvent.OutputObject
    >;

    "MilestoneUpdated(tuple)": TypedContractEvent<
      MilestoneUpdatedEvent.InputTuple,
      MilestoneUpdatedEvent.OutputTuple,
      MilestoneUpdatedEvent.OutputObject
    >;
    MilestoneUpdated: TypedContractEvent<
      MilestoneUpdatedEvent.InputTuple,
      MilestoneUpdatedEvent.OutputTuple,
      MilestoneUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RfpCreated(tuple)": TypedContractEvent<
      RfpCreatedEvent.InputTuple,
      RfpCreatedEvent.OutputTuple,
      RfpCreatedEvent.OutputObject
    >;
    RfpCreated: TypedContractEvent<
      RfpCreatedEvent.InputTuple,
      RfpCreatedEvent.OutputTuple,
      RfpCreatedEvent.OutputObject
    >;

    "RfpPublished(string,uint256,uint256)": TypedContractEvent<
      RfpPublishedEvent.InputTuple,
      RfpPublishedEvent.OutputTuple,
      RfpPublishedEvent.OutputObject
    >;
    RfpPublished: TypedContractEvent<
      RfpPublishedEvent.InputTuple,
      RfpPublishedEvent.OutputTuple,
      RfpPublishedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
